#include<bits/stdc++.h>
using namespace std;
#define end1 '\n'
#define no cout << "NO\n"
#define yes cout << "YES\n"
#define ll long long
#define testcases ll t; cin >> t; while(t--)
#define BeB_F2 ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define srt(v) sort(v.begin(),v.end())
bool knowbit(ll n, int i){
    ll res = (n>>i) & 1;
    return res;
}
ll tone(ll n, int i){
    n = (1<<i)|n;
    return n;
}
ll tozero(ll n, int i){
    n = ~(1<<i)&n;
    return n;
}
ll onezero(ll n,int i){
    return ((1<<i)^n);
}
ll GCD(ll a , ll b){
    // you can get gcd of 2 numbers by prime factors of 2 numbers choose min power of each
    // prime factor
    // 2 2 3
    // 3 3 3
    // gcd = pow(2,0)*pow(3,1)
    if(b==0)return a;
    return GCD(b,a%b);
}
ll LCM(ll a, ll b){
    // you can get gcd of 2 numbers by prime factors of 2 numbers choose max power of each
    // prime factor
    // 2 2 3
    // 3 3 3
    // gcd = pow(2,2)*pow(3,3)
    return a*b/GCD(a,b);
}

vector<pair<ll,ll>> prime_factors_of_a_number(ll n){
    ll ans = 0;// number of prime divisors
    vector<pair<ll,ll>>ret;
    for(ll i = 2 ; i*i<=n ;i++){
        if(n%i==0){
            ll c = 0;
            while(n%i==0){
                n/=i;c++;
            }
            ret.emplace_back(i,c);
            ans+=c;
        }
    }
    if(n>1)ret.emplace_back(n,1),ans++;
    return ret;
}

vector<bool>prime(10000001,true);

void seive(){

    prime[1]=false;prime[0]=false;
    for(int i = 2 ; i<=sqrt(10000000) ; i++){
        if(prime[i]){
            for(int j = i*i ; j<=10000000  ;j+=i){
                prime[j]=false;
            }
        }
    }

}

void submasks_of_anumber(ll n){
    // submask بيبقي فيه الوحايد فقط الموجودة فال ماسك الاصلي
    ll tmp=n;
    while(n!=0){
        cout << n << end1;
        n=tmp&(n-1);
    }
    cout << n << end1;
}

int ask(string s){
    // الحاجة الهسال عليها بتتبعت لل parameter و الاجابة اعملها cin
    cout << "? " << s<< endl;
    cout.flush();
    int n;cin >> n;
    return n;
}

void ternary_search(){
    int l,r;
    int mid1 = l+(r-l)/3;
    int mid2 = r-(r-l)/3;
}

ll fac(ll n){
    ll ret = 1;
    for (ll i = 1; i <=n; ++i) {
        ret*=i;
    }
    return ret;
}

bool sq(ll n){
    ll x = sqrt(n);
    if(x*x==n)return true;
    return false;
}

bool compare(pair<ll,ll>&a,pair<ll,ll>&b){
    return a.second>b.second;
}

const ll mod = 1e9+7;

ll power(ll a , ll b){
    if(b==0)return 1;
    else if(b==1)return a;
    ll ret = power(a,b/2)%mod;
    ret*=(ret%mod);
    ll mul = 1;
    if(b&1)mul=a;
    return (ret*mul)%mod;
}

// All numbers at most 1e5 have at most 128 divisors
// bitmask problems cout binary rep of input and output and try to find pattern
// notice the output if its power of 2 or power of 2 minus 1
// there is a certain number(range/2+1) in an interval that from it and after there is no multiples of it
// like rang 1->10 from 6 6*2 is greater than 10
// any even number consists of sum of 2 prime numbers

char way[4] = {'d','l','u','r'};
int dx[4] = {1,0,-1,0};
int dy[4] = {0,-1,0,1};
const int sz = 2e5+5;
vector<ll>adj[sz];
vector<bool>vis(sz);
void dfs(){


}


void solve() {

}

signed main() {

    BeB_F2
    //seive();
   //testcases
        solve();
}
